@use "sass:selector";
@use "sass:string";
@use "sass:list";
@use "breakpoints" as *;

$invalid-selector: selector.parse(".fgarhzjgfklaherlkjghaerlkghalekrjfgliurae");

@mixin sheet-nav-bar {
	nav.sheet-navigation {
		flex-wrap: wrap;
		height: unset;

		.item {
			font-size: 1.5em;
			height: 2rem;
			width: 2rem;

			.action-glyph {
				font-size: 1.5rem;
			}
		}

		.panel-title {
			display: none;
			width: unset;
		}
	}
}

@function ternary($condition, $first, $second) {
	@if $condition {
		@return $first;
	} @else {
		@return $second;
	}
}

// noinspection CssInvalidFunction
@function add-body-data($parent: &, $add) {
	@if selector.is-superselector("body", $parent) {
		$sels: ();

		@each $sel in $parent {
			$new: selector.unify(list.nth($sel, 1), "body" + $add);

			@if string.index(list.nth($sel, 1), ":not(" + list.nth(string.split($add, "="),1)) {
				$new: $invalid-selector;
			}

			$sels: list.append($sels, list.set-nth($sel, 1, $new));
		}

		@return $sels;
	}

	@return selector.nest("body" + $add, $parent);
}

@mixin body-data-tag($tag) {
	$parent: &;

	@if not $parent {
		$parent: body;
	}

	$selector: add-body-data($parent, $tag);

	@if $selector != $invalid-selector {
		@at-root #{$selector} {
			@content;
		}
	}
}

@mixin layout($mode) {
	$parent: &;
	$selector: $invalid-selector;
	$selector2: $selector;

	@if not & {
		$parent: body;
	}

	$selector: add-body-data($parent, ":not([data-mobile-force-mobile-layout])");

	@if $mode == "mobile" or $mode == "desktop" {
		$selector2: add-body-data($parent, "[data-mobile-force-mobile-layout=" + ($mode == "mobile") + "]");

		@if $selector != $invalid-selector and $selector2 != $invalid-selector {
			@media screen and (#{ternary($mode == "mobile", max-width, min-width)}: #{$global-breakpoint}) {
				@at-root #{$selector} {
					@content;
				}
			}

			@at-root #{$selector2} {
				@content;
			}
		}

	} @else if $mode == "tablet" {
		$selector: add-body-data($parent, "[data-mobile-force-mobile-layout=true]");

		@if $selector != $invalid-selector {
			@media screen and (min-width: #{$global-breakpoint}) {
				@at-root #{$selector} {
					@content;
				}
			}
		}
	}
}


@mixin global-mobile {
	@include layout("mobile") {
		@content;
	}
}

@mixin global-tablet {
	@include layout("tablet") {
		@content;
	}
}

@mixin global-desktop {
	@include layout("desktop") {
		@content;
	}
}

@mixin tab($tab) {
	@include global-mobile {
		&[data-mobile-tab=#{$tab}] {
			--tab: "#{$tab}";
			@content;
		}
	}
}

@mixin hide-hud($root: true) {
	@if & {
		@debug "hide-hud" selector.is-superselector("body", &);
	}

	@if $root {
		@at-root body[data-mobile-hide-hud="true"] {
			@content;
		}
	} @else {
		body[data-mobile-hide-hud="true"] & {
			@content;
		}
	}
}

@mixin window($mode, $breakpoint, $container, $additional-tags: null) {
	body:not([data-mobile-force-mobile-window])#{$additional-tags} & {
		@container #{$container} (width #{ternary($mode == "mobile", "<", ">=")} #{$breakpoint}) {
			@content;
		}
	}

	body[data-mobile-force-mobile-window=#{$mode == "mobile"}]#{$additional-tags} & {
		@content;
	}
}

@mixin local-mobile($breakpoint, $container, $additional-tags: null) {
	@include window("mobile", $breakpoint, $container, $additional-tags) {
		--mode: "mobile";
		@content;
	}
}

@mixin local-desktop($breakpoint, $container, $additional-tags: null) {
	@include window("desktop", $breakpoint, $container, $additional-tags) {
		@content;
	}
}

@mixin hide-animation {
	transition: transform 100ms ease-out;
}


@mixin glass {
	& {
		border: none;
		border-radius: var(--border-radius);
		background: none;
		background-color: var(--glass-bg);
		box-shadow: var(--glassy);
	}
}

@mixin quick-transition {
	$transition-time: 0.15s;

	transition: text-shadow $transition-time ease-in-out, background-color $transition-time ease-in-out,
	border $transition-time ease-in-out, color $transition-time ease-in-out, box-shadow $transition-time ease-in-out,
	backdrop-filter $transition-time ease-in-out, border-radius $transition-time, outline $transition-time;
}

@mixin gold-border {
	border: none;
	margin: 2px;

	/* prettier-ignore */
	box-shadow:
		0 0 0 1px var(--tertiary),
		0 0 0 2px var(--gold-brown);
}

@mixin sheet {
	@include gold-border;

	background-image: var(--sheet);
	background-size: cover;
}

@mixin dui-app {
	background: var(--app-background);
	border: var(--app-border-width) solid var(--app-border-color);
	text-shadow: var(--app-text-shadow);
	border-radius: var(--border-radius);
	box-shadow: var(--box-shadow);
	color: var(--text-color-3);
}

@mixin dui-grayscale {
	> img {
		filter: sepia(0) brightness(0.7) sepia(1) grayscale(0.7) drop-shadow(0 1px 1px black);
	}

	&:hover > img {
		filter: sepia(0) grayscale(0.95) brightness(1) drop-shadow(0 1px 1px black);
	}
}

@mixin dui-button {
	@include dui-app;

	background: var(--button-background);
	border: var(--app-border-width) solid var(--button-border-color);
	color: var(--button-text-color);
	box-shadow: var(--box-shadow);
	text-decoration: none;
	cursor: pointer;
	text-shadow: var(--app-text-shadow);

	// &:not(.disabled, :disabled):hover {
	// 	background: var(--button-hover-background);
	// 	color: var(--button-hover-text-color);
	// 	border: var(--app-border-width) solid var(--button-hover-border-color);
	// 	box-shadow: var(--box-shadow);
	// }

	&.view,
	&.selected,
	&.active {
		background: var(--button-hover-background);
		outline: 1px solid var(--button-focus-outline-color);
		border-color: var(--button-hover-border-color);
		color: var(--button-hover-text-color);
		text-decoration: none !important;
		font-weight: unset !important;
	}

	&.empty,
	&.disabled,
	&:disabled {
		--button-background: var(--button-disabled-background);
		--button-hover-background: var(--button-disabled-background);
		--button-border-color: var(--button-disabled-border-color);
		--button-text-color: var(--text-color-5);
	}
}

@mixin dui-button-bright {
	@include dui-button;

	& {
		transition: background 0.1s ease-in-out;

		--button-background: var(--accent-color);
		--button-border-color: var(--accent-color-dark);
		--button-text-color: var(--accent-text-color);
		--app-text-shadow: none;
		--button-hover-background: var(--accent-color-light);
		--button-hover-border-color: var(--accent-color);
		--button-hover-text-color: var(--accent-text-color);
	}

	&:disabled {
		--button-background: color-mix(in srgb, var(--button-background) 50%, transparent 50%);
		--button-border-color: color-mix(in srgb, var(--button-border-color) 50%, transparent 50%);
		--button-hover-background: color-mix(in srgb, var(--button-hover-background) 50%, transparent 50%);
	}
}

@mixin dui-button-toggle {
	@include dui-button;

	& {
		transition: background 0.1s ease-in-out;

		--button-background: var(--button-toggle-background);
		--button-border-color: var(--button-toggle-border-color);
		--button-focus-outline-color: var(--button-toggle-focus-outline-color);
		--button-hover-background: var(--button-toggle-hover-background);
		--button-hover-border-color: var(--button-toggle-hover-border-color);
	}

	&:disabled {
		--button-background: color-mix(in srgb, var(--button-background) 50%, transparent 50%);
		--button-border-color: color-mix(in srgb, var(--button-border-color) 50%, transparent 50%);
		--button-hover-background: color-mix(in srgb, var(--button-hover-background) 50%, transparent 50%);
	}
}

@mixin dui-input {
	background: var(--input-background);
	border: var(--app-border-width) solid;
	border-color: var(--input-border-color) !important;
	color: var(--input-text-color);
	box-shadow: var(--input-box-shadow) !important;
	align-items: center;
	// height: var(--input-height);
	// line-height: var(--input-height);
	// padding: 0 0.3rem;
	border-radius: 4px;
	outline: 1px solid transparent;
	user-select: text;
	// font-size: var(--font-size);
	transition: outline-color 0.5s;

	&:not(:disabled, .disabled, [type="checkbox"]):hover,
	&:focus {
		outline: 1px solid var(--input-focus-outline-color);
		border: var(--app-border-width) solid;
		border-color: var(--input-border-color);
		color: var(--input-focus-text-color);
		box-shadow: var(--box-shadow);
	}

	&.disabled,
	&:disabled {
		--input-text-color: var(--text-color-disabled);
		--input-background: var(--input-disabled-background);
		--input-border-color: var(--input-disabled-border-color);

		&::placeholder {
			color: color-mix(in srgb, var(--input-placeholder-color) 50%, transparent);
		}
	}

	&::placeholder {
		color: var(--input-placeholder-color);
	}

	&::selection {
		// color: var(--input-text-color);
		// background: rgba(122, 122, 122, 0.5);
	}

	&[type="checkbox"] {
		outline: unset !important;
		border: unset !important;
		box-shadow: unset !important;
	}
}

@mixin dui-tooltip {
	@include dui-app;

	background: var(--app-background);
	border: var(--app-border-width) solid var(--app-border-color);
	box-shadow: var(--window-app-box-shadow);
	border-radius: var(--border-radius);
	backdrop-filter: blur(5px);
	text-shadow: 0 1px 2px black;
}
